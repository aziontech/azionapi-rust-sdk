/*
 * Web Application Firewall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateNewWafRulesetRequest {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// Identification name for WAF Rule Set.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "mode")]
    pub mode: Mode,
    #[serde(rename = "active")]
    pub active: bool,
    #[serde(rename = "sql_injection")]
    pub sql_injection: bool,
    #[serde(rename = "sql_injection_sensitivity")]
    pub sql_injection_sensitivity: crate::models::WafSensitivityChoices,
    #[serde(rename = "remote_file_inclusion")]
    pub remote_file_inclusion: bool,
    #[serde(rename = "remote_file_inclusion_sensitivity")]
    pub remote_file_inclusion_sensitivity: crate::models::WafSensitivityChoices,
    #[serde(rename = "directory_traversal")]
    pub directory_traversal: bool,
    #[serde(rename = "directory_traversal_sensitivity")]
    pub directory_traversal_sensitivity: crate::models::WafSensitivityChoices,
    #[serde(rename = "cross_site_scripting")]
    pub cross_site_scripting: bool,
    #[serde(rename = "cross_site_scripting_sensitivity")]
    pub cross_site_scripting_sensitivity: crate::models::WafSensitivityChoices,
    #[serde(rename = "evading_tricks")]
    pub evading_tricks: bool,
    #[serde(rename = "evading_tricks_sensitivity")]
    pub evading_tricks_sensitivity: crate::models::WafSensitivityChoices,
    #[serde(rename = "file_upload")]
    pub file_upload: bool,
    #[serde(rename = "file_upload_sensitivity")]
    pub file_upload_sensitivity: crate::models::WafSensitivityChoices,
    #[serde(rename = "unwanted_access")]
    pub unwanted_access: bool,
    #[serde(rename = "unwanted_access_sensitivity")]
    pub unwanted_access_sensitivity: crate::models::WafSensitivityChoices,
    #[serde(rename = "identified_attack")]
    pub identified_attack: bool,
    #[serde(rename = "identified_attack_sensitivity")]
    pub identified_attack_sensitivity: crate::models::WafSensitivityChoices,
    #[serde(rename = "bypass_addresses")]
    pub bypass_addresses: Vec<String>,
}

impl CreateNewWafRulesetRequest {
    pub fn new(name: String, mode: Mode, active: bool, sql_injection: bool, sql_injection_sensitivity: crate::models::WafSensitivityChoices, remote_file_inclusion: bool, remote_file_inclusion_sensitivity: crate::models::WafSensitivityChoices, directory_traversal: bool, directory_traversal_sensitivity: crate::models::WafSensitivityChoices, cross_site_scripting: bool, cross_site_scripting_sensitivity: crate::models::WafSensitivityChoices, evading_tricks: bool, evading_tricks_sensitivity: crate::models::WafSensitivityChoices, file_upload: bool, file_upload_sensitivity: crate::models::WafSensitivityChoices, unwanted_access: bool, unwanted_access_sensitivity: crate::models::WafSensitivityChoices, identified_attack: bool, identified_attack_sensitivity: crate::models::WafSensitivityChoices, bypass_addresses: Vec<String>) -> CreateNewWafRulesetRequest {
        CreateNewWafRulesetRequest {
            id: None,
            name,
            mode,
            active,
            sql_injection,
            sql_injection_sensitivity,
            remote_file_inclusion,
            remote_file_inclusion_sensitivity,
            directory_traversal,
            directory_traversal_sensitivity,
            cross_site_scripting,
            cross_site_scripting_sensitivity,
            evading_tricks,
            evading_tricks_sensitivity,
            file_upload,
            file_upload_sensitivity,
            unwanted_access,
            unwanted_access_sensitivity,
            identified_attack,
            identified_attack_sensitivity,
            bypass_addresses,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "blocking")]
    Blocking,
    #[serde(rename = "counting")]
    Counting,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Blocking
    }
}

