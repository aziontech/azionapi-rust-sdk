/*
 * Web Application Firewall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WafEvents200ResultsInner {
    #[serde(rename = "country_count", skip_serializing_if = "Option::is_none")]
    pub country_count: Option<i64>,
    #[serde(rename = "top_10_countries", skip_serializing_if = "Option::is_none")]
    pub top_10_countries: Option<Vec<crate::models::WafEvents200ResultsInnerTop10CountriesInner>>,
    #[serde(rename = "top_10_ips", skip_serializing_if = "Option::is_none")]
    pub top_10_ips: Option<Vec<crate::models::WafEvents200ResultsInnerTop10CountriesInner>>,
    #[serde(rename = "hit_count", skip_serializing_if = "Option::is_none")]
    pub hit_count: Option<i64>,
    #[serde(rename = "rule_id", skip_serializing_if = "Option::is_none")]
    pub rule_id: Option<i64>,
    #[serde(rename = "ip_count", skip_serializing_if = "Option::is_none")]
    pub ip_count: Option<i64>,
    #[serde(rename = "match_zone", skip_serializing_if = "Option::is_none")]
    pub match_zone: Option<MatchZone>,
    #[serde(rename = "path_count", skip_serializing_if = "Option::is_none")]
    pub path_count: Option<i64>,
    #[serde(rename = "matches_on", skip_serializing_if = "Option::is_none")]
    pub matches_on: Option<MatchesOn>,
    #[serde(rename = "rule_description", skip_serializing_if = "Option::is_none")]
    pub rule_description: Option<String>,
}

impl WafEvents200ResultsInner {
    pub fn new() -> WafEvents200ResultsInner {
        WafEvents200ResultsInner {
            country_count: None,
            top_10_countries: None,
            top_10_ips: None,
            hit_count: None,
            rule_id: None,
            ip_count: None,
            match_zone: None,
            path_count: None,
            matches_on: None,
            rule_description: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MatchZone {
    #[serde(rename = "path")]
    Path,
    #[serde(rename = "query_string")]
    QueryString,
    #[serde(rename = "request_header")]
    RequestHeader,
    #[serde(rename = "request_body")]
    RequestBody,
    #[serde(rename = "raw_body")]
    RawBody,
    #[serde(rename = "file_name")]
    FileName,
    #[serde(rename = "cookie")]
    Cookie,
}

impl Default for MatchZone {
    fn default() -> MatchZone {
        Self::Path
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MatchesOn {
    #[serde(rename = "name")]
    Name,
    #[serde(rename = "value")]
    Value,
}

impl Default for MatchesOn {
    fn default() -> MatchesOn {
        Self::Name
    }
}

