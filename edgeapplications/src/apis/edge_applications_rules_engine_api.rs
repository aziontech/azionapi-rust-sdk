/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`edge_applications_edge_application_id_rules_engine_phase_rules_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetError {
    Status400(),
    Status403(),
    Status404(),
    Status422(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`edge_applications_edge_application_id_rules_engine_phase_rules_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostError {
    Status400(),
    Status403(),
    Status404(),
    Status422(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteError {
    Status400(),
    Status403(),
    Status404(),
    Status422(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetError {
    Status400(),
    Status403(),
    Status404(),
    Status422(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchError {
    Status400(),
    Status403(),
    Status404(),
    Status422(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutError {
    Status400(),
    Status403(),
    Status404(),
    Status422(),
    Status500(),
    UnknownValue(serde_json::Value),
}


pub async fn edge_applications_edge_application_id_rules_engine_phase_rules_get(configuration: &configuration::Configuration, edge_application_id: i64, phase: &str, page: Option<i64>, page_size: Option<i64>, filter: Option<&str>, order_by: Option<&str>, sort: Option<&str>, accept: Option<&str>) -> Result<models::RulesEngineResponse, Error<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_edge_application_id = edge_application_id;
    let p_phase = phase;
    let p_page = page;
    let p_page_size = page_size;
    let p_filter = filter;
    let p_order_by = order_by;
    let p_sort = sort;
    let p_accept = accept;

    let uri_str = format!("{}/edge_applications/{edge_application_id}/rules_engine/{phase}/rules", configuration.base_path, edge_application_id=p_edge_application_id, phase=crate::apis::urlencode(p_phase));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_page_size {
        req_builder = req_builder.query(&[("page_size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_order_by {
        req_builder = req_builder.query(&[("order_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sort {
        req_builder = req_builder.query(&[("sort", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_accept {
        req_builder = req_builder.header("Accept", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RulesEngineResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RulesEngineResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Check below the list of behaviors that can be applied:  | Name                                | Behavior               | | ----------------------------------- | ---------------------- | | Add Request Cookie                  | add_request_cookie     | | Add Request Header                  | add_request_header     | | Add Response Cookie                 | set_cookie             | | Add Response Header                 | add_response_header    | | Bypass Cache                        | bypass_cache_phase     | | Capture Match Groups                | capture_match_groups   | | Deliver                             | deliver                | | Deny (403 Forbidden)                | deny                   | | Enable Gzip                         | enable_gzip            | | Filter Request Cookie               | filter_request_cookie  | | Filter Request Header               | filter_request_header  | | Filter Response Cookie              | filter_response_cookie | | Filter Response Header              | filter_response_header | | Finish Request Phase                | finish_request_phase   | | Forward Cookies                     | forward_cookies        | | Optimize Images                     | optimize_images        | | Redirect HTTP to HTTPS              | redirect_http_to_https | | Redirect To (301 Moved Permanently) | redirect_to_301        | | Redirect To (302 Found)             | redirect_to_302        | | Rewrite Request                     | rewrite_request        | | Run Function                        | run_function           | | Set Cache Policy                    | set_cache_policy       | | Set Origin                          | set_origin             |
pub async fn edge_applications_edge_application_id_rules_engine_phase_rules_post(configuration: &configuration::Configuration, edge_application_id: i64, phase: &str, accept: Option<&str>, content_type: Option<&str>, create_rules_engine_request: Option<models::CreateRulesEngineRequest>) -> Result<models::RulesEngineIdResponse, Error<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_edge_application_id = edge_application_id;
    let p_phase = phase;
    let p_accept = accept;
    let p_content_type = content_type;
    let p_create_rules_engine_request = create_rules_engine_request;

    let uri_str = format!("{}/edge_applications/{edge_application_id}/rules_engine/{phase}/rules", configuration.base_path, edge_application_id=p_edge_application_id, phase=crate::apis::urlencode(p_phase));
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_accept {
        req_builder = req_builder.header("Accept", param_value.to_string());
    }
    if let Some(param_value) = p_content_type {
        req_builder = req_builder.header("Content-Type", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_create_rules_engine_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RulesEngineIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RulesEngineIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_delete(configuration: &configuration::Configuration, edge_application_id: i64, phase: &str, rule_id: i64, accept: Option<&str>) -> Result<(), Error<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_edge_application_id = edge_application_id;
    let p_phase = phase;
    let p_rule_id = rule_id;
    let p_accept = accept;

    let uri_str = format!("{}/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}", configuration.base_path, edge_application_id=p_edge_application_id, phase=crate::apis::urlencode(p_phase), rule_id=p_rule_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_accept {
        req_builder = req_builder.header("Accept", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_get(configuration: &configuration::Configuration, edge_application_id: i64, phase: &str, rule_id: i64, accept: Option<&str>) -> Result<models::RulesEngineIdResponse, Error<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_edge_application_id = edge_application_id;
    let p_phase = phase;
    let p_rule_id = rule_id;
    let p_accept = accept;

    let uri_str = format!("{}/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}", configuration.base_path, edge_application_id=p_edge_application_id, phase=crate::apis::urlencode(p_phase), rule_id=p_rule_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_accept {
        req_builder = req_builder.header("Accept", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RulesEngineIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RulesEngineIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_patch(configuration: &configuration::Configuration, edge_application_id: i64, phase: &str, rule_id: i64, accept: Option<&str>, content_type: Option<&str>, patch_rules_engine_request: Option<models::PatchRulesEngineRequest>) -> Result<models::RulesEngineIdResponse, Error<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_edge_application_id = edge_application_id;
    let p_phase = phase;
    let p_rule_id = rule_id;
    let p_accept = accept;
    let p_content_type = content_type;
    let p_patch_rules_engine_request = patch_rules_engine_request;

    let uri_str = format!("{}/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}", configuration.base_path, edge_application_id=p_edge_application_id, phase=crate::apis::urlencode(p_phase), rule_id=p_rule_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_accept {
        req_builder = req_builder.header("Accept", param_value.to_string());
    }
    if let Some(param_value) = p_content_type {
        req_builder = req_builder.header("Content-Type", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_patch_rules_engine_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RulesEngineIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RulesEngineIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_put(configuration: &configuration::Configuration, edge_application_id: i64, phase: &str, rule_id: i64, accept: Option<&str>, content_type: Option<&str>, update_rules_engine_request: Option<models::UpdateRulesEngineRequest>) -> Result<models::RulesEngineIdResponse, Error<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_edge_application_id = edge_application_id;
    let p_phase = phase;
    let p_rule_id = rule_id;
    let p_accept = accept;
    let p_content_type = content_type;
    let p_update_rules_engine_request = update_rules_engine_request;

    let uri_str = format!("{}/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}", configuration.base_path, edge_application_id=p_edge_application_id, phase=crate::apis::urlencode(p_phase), rule_id=p_rule_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_accept {
        req_builder = req_builder.header("Accept", param_value.to_string());
    }
    if let Some(param_value) = p_content_type {
        req_builder = req_builder.header("Content-Type", param_value.to_string());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("Authorization", value);
    };
    req_builder = req_builder.json(&p_update_rules_engine_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RulesEngineIdResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RulesEngineIdResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

