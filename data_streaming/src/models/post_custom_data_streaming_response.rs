/*
 * Data Streaming - OpenAPI
 *
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PostCustomDataStreamingResponse {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Options:  * `http` - Edge Applications  * `waf` - WAF Events  * `cells_console` - Edge Functions  * `rtm_activity` - Activity History   
    #[serde(rename = "data_source", skip_serializing_if = "Option::is_none")]
    pub data_source: Option<DataSource>,
    /// Note:  * Add all variables and values that will be used to stream according to the data source you choose to use.   
    #[serde(rename = "template_model", skip_serializing_if = "Option::is_none")]
    pub template_model: Option<String>,
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "endpoint", skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// Note:  * Field not used with the rtm_activity data source. 
    #[serde(rename = "all_domains", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub all_domains: Option<Option<bool>>,
}

impl PostCustomDataStreamingResponse {
    pub fn new() -> PostCustomDataStreamingResponse {
        PostCustomDataStreamingResponse {
            id: None,
            name: None,
            data_source: None,
            template_model: None,
            active: None,
            endpoint: None,
            all_domains: None,
        }
    }
}

/// Options:  * `http` - Edge Applications  * `waf` - WAF Events  * `cells_console` - Edge Functions  * `rtm_activity` - Activity History   
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DataSource {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "waf")]
    Waf,
    #[serde(rename = "cells_console")]
    CellsConsole,
    #[serde(rename = "rtm_activity")]
    RtmActivity,
}

impl Default for DataSource {
    fn default() -> DataSource {
        Self::Http
    }
}

