/*
 * Data Streaming - OpenAPI
 *
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataStreamingPostBody {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Options:  * `2` - Edge Applications Event Collector  * `4` - WAF Event Collector  * `86` - Edge Functions Event Collector  * `184` - Edge Applications + WAF Event Collector  * `251` - Activity History Collector 
    #[serde(rename = "template_id", skip_serializing_if = "Option::is_none")]
    pub template_id: Option<TemplateId>,
    /// Options:  * `http` - Edge Applications (default)  * `waf` - WAF Events  * `cells_console` - Edge Functions  * `rtm_activity` - Activity History 
    #[serde(rename = "data_source", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub data_source: Option<Option<DataSource>>,
    #[serde(rename = "active", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub active: Option<Option<bool>>,
    /// Options' examples:  - `Standard HTTP/HTTPS POST` - { \"endpoint_type\": \"standard\", \"url\": \"http://example.com\", \"log_line_separator\": \"\\n\", \"payload_format\": \"$dataset\", \"max_size\": 1000024 }  - `Apache Kafka` - { \"endpoint_type\": \"kafka\", \"kafka_topic\": \"example_topic\", \"bootstrap_servers\": \"kafka-server.com:9092,kafka-server-2.com:9092\", \"use_tls\":true }  - `Simple Storage Service (S3)` - { \"endpoint_type\": \"s3\", \"access_key\": \"MYACCESSKEY\", \"region\": \"us-east-1\", \"object_key_prefix\": \"my_prefix_\", \"bucket_name\": \"bucket_example\", \"content_type\": \"plain/text\", \"host_url\": \"http://aws-host.com\", \"secret_key\": \"MYSECRETKEY\" }  - `Google BigQuery` - { \"endpoint_type\": \"big_query\", \"dataset_id\": \"my_dataset\", \"project_id\": \"my_project\", \"table_id\": \"my_table\", \"service_account_key\": \"{ \"service_account_key\": \"key_content\" }\" }  - `Elasticsearch` - { “endpoint_type”: \"elasticsearch\", “url”: “http://elasticsearch.com”, “api_key”: “XYZ_API_KEY” }  - `AWS Kinesis Data Firehose` -  { \"endpoint_type\": \"aws_kinesis_firehose\", \"access_key\": \"MYACCESSKEY\", \"stream_name\": \"my_stream_name\", \"region\": \"us-east-1\", \"secret_key\": \"MYSECRETKEY\" }  - `Datadog` - { \"endpoint_type\": \"datadog\", \"url\": \"https://http-intake.logs.datadoghq.com/v1/input\", \"api_key\": \"MYAPIKEY\" }  - `IBM QRadar` - { \"endpoint_type\": \"qradar\", \"url\": \"http://137.15.824.10:14440” }  - `Azure Monitor` - { \"endpoint_type\": \"azure_monitor\", \"log_type\": \"myLogType\", \"shared_key\": \"mysharedkey\", \"time_generated_field\": \"timeGeneratedField\", \"workspace_id\": \"anfhw-123sd-466gcs\"}  - `Azure Blob Storage` - { \"endpoint_type\": \"azure_blob_storage\", \"storage_account\": \"mystorageaccount\", \"container_name\": \"log_container\", \"blob_sas_token\": \"fd56e23e1f12efe\" }  - `Splunk` - { \"endpoint_type\": \"splunk\", \"url\": \"https://inputs.splunk-client.splunkcloud.com:1337/services/collector\", \"api_key\": \"MYAPIKEY\" } 
    #[serde(rename = "endpoint", skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// Note:  * Field not used with the rtm_activity data source. 
    #[serde(rename = "domains_ids", skip_serializing_if = "Option::is_none")]
    pub domains_ids: Option<Vec<i32>>,
    /// Note:  * Field not used with the rtm_activity data source. 
    #[serde(rename = "all_domains", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub all_domains: Option<Option<bool>>,
    /// Note:  * `Range` - From 0 to 100.  * `To use:` [Contact the sales team](https://www.azion.com/en/contact-sales/) to activate this feature in your account. 
    #[serde(rename = "sampling_percentage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sampling_percentage: Option<Option<i32>>,
}

impl DataStreamingPostBody {
    pub fn new() -> DataStreamingPostBody {
        DataStreamingPostBody {
            name: None,
            template_id: None,
            data_source: None,
            active: None,
            endpoint: None,
            domains_ids: None,
            all_domains: None,
            sampling_percentage: None,
        }
    }
}

/// Options:  * `2` - Edge Applications Event Collector  * `4` - WAF Event Collector  * `86` - Edge Functions Event Collector  * `184` - Edge Applications + WAF Event Collector  * `251` - Activity History Collector 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TemplateId {
    #[serde(rename = "2")]
    Variant2,
    #[serde(rename = "4")]
    Variant4,
    #[serde(rename = "86")]
    Variant86,
    #[serde(rename = "184")]
    Variant184,
    #[serde(rename = "251")]
    Variant251,
}

impl Default for TemplateId {
    fn default() -> TemplateId {
        Self::Variant2
    }
}
/// Options:  * `http` - Edge Applications (default)  * `waf` - WAF Events  * `cells_console` - Edge Functions  * `rtm_activity` - Activity History 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DataSource {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "waf")]
    Waf,
    #[serde(rename = "cells_console")]
    CellsConsole,
    #[serde(rename = "rtm_activity")]
    RtmActivity,
}

impl Default for DataSource {
    fn default() -> DataSource {
        Self::Http
    }
}

