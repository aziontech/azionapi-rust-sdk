/*
 * Data Streaming - OpenAPI
 *
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostDataStreamingResponseEndpointInner {
    #[serde(rename = "endpoint_type", skip_serializing_if = "Option::is_none")]
    pub endpoint_type: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "log_line_separator", skip_serializing_if = "Option::is_none")]
    pub log_line_separator: Option<String>,
    #[serde(rename = "payload_format", skip_serializing_if = "Option::is_none")]
    pub payload_format: Option<String>,
    #[serde(rename = "max_size", skip_serializing_if = "Option::is_none")]
    pub max_size: Option<i32>,
    #[serde(rename = "headers", skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<::std::collections::HashMap<String, String>>>,
    #[serde(rename = "kafka_topic", skip_serializing_if = "Option::is_none")]
    pub kafka_topic: Option<String>,
    #[serde(rename = "bootstrap_servers", skip_serializing_if = "Option::is_none")]
    pub bootstrap_servers: Option<String>,
    #[serde(rename = "use_tls", skip_serializing_if = "Option::is_none")]
    pub use_tls: Option<bool>,
    #[serde(rename = "access_key", skip_serializing_if = "Option::is_none")]
    pub access_key: Option<String>,
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(rename = "object_key_prefix", skip_serializing_if = "Option::is_none")]
    pub object_key_prefix: Option<String>,
    #[serde(rename = "bucket_name", skip_serializing_if = "Option::is_none")]
    pub bucket_name: Option<String>,
    #[serde(rename = "content_type", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(rename = "host_url", skip_serializing_if = "Option::is_none")]
    pub host_url: Option<String>,
    #[serde(rename = "secret_key", skip_serializing_if = "Option::is_none")]
    pub secret_key: Option<String>,
    #[serde(rename = "dataset_id", skip_serializing_if = "Option::is_none")]
    pub dataset_id: Option<String>,
    #[serde(rename = "project_id", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "table_id", skip_serializing_if = "Option::is_none")]
    pub table_id: Option<String>,
    #[serde(rename = "service_account_key", skip_serializing_if = "Option::is_none")]
    pub service_account_key: Option<Box<crate::models::EndpointGoogleBigQueryServiceAccountKey>>,
    #[serde(rename = "api_key", skip_serializing_if = "Option::is_none")]
    pub api_key: Option<String>,
    #[serde(rename = "stream_name", skip_serializing_if = "Option::is_none")]
    pub stream_name: Option<String>,
    #[serde(rename = "log_type", skip_serializing_if = "Option::is_none")]
    pub log_type: Option<String>,
    #[serde(rename = "shared_key", skip_serializing_if = "Option::is_none")]
    pub shared_key: Option<String>,
    #[serde(rename = "time_generated_field", skip_serializing_if = "Option::is_none")]
    pub time_generated_field: Option<String>,
    #[serde(rename = "workspace_id", skip_serializing_if = "Option::is_none")]
    pub workspace_id: Option<String>,
    #[serde(rename = "storage_account", skip_serializing_if = "Option::is_none")]
    pub storage_account: Option<String>,
    #[serde(rename = "container_name", skip_serializing_if = "Option::is_none")]
    pub container_name: Option<String>,
    #[serde(rename = "blob_sas_token", skip_serializing_if = "Option::is_none")]
    pub blob_sas_token: Option<String>,
}

impl PostDataStreamingResponseEndpointInner {
    pub fn new() -> PostDataStreamingResponseEndpointInner {
        PostDataStreamingResponseEndpointInner {
            endpoint_type: None,
            url: None,
            log_line_separator: None,
            payload_format: None,
            max_size: None,
            headers: None,
            kafka_topic: None,
            bootstrap_servers: None,
            use_tls: None,
            access_key: None,
            region: None,
            object_key_prefix: None,
            bucket_name: None,
            content_type: None,
            host_url: None,
            secret_key: None,
            dataset_id: None,
            project_id: None,
            table_id: None,
            service_account_key: None,
            api_key: None,
            stream_name: None,
            log_type: None,
            shared_key: None,
            time_generated_field: None,
            workspace_id: None,
            storage_account: None,
            container_name: None,
            blob_sas_token: None,
        }
    }
}


